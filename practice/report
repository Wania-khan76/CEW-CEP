#include <stdio.h>

#include <stdlib.h>

#include <curl/curl.h>

#include <jansson.h>



// Callback function to write data to a file

size_t write_callback(void *contents, size_t size, size_t nmemb, FILE *file) {

    return fwrite(contents, size, nmemb, file);

}



// Function to extract and write weather data to a file

void extract_and_write_weather_data(const char *json_data) {

    // Your existing code for extracting and writing weather data

}



// Function to write a report based on weather data

void write_report(const char *buffer) {

    FILE *reportFile = fopen("report.txt", "w");

    if (!reportFile) {

        fprintf(stderr, "Error opening report file for writing.\n");

        return;

    }



    fprintf(reportFile, "Weather Report:\n\n");



    // Call the function to extract and write weather data

    extract_and_write_weather_data(buffer);



    fclose(reportFile);

}



int main() {

    const char *url = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/24.8607,67.0011/next14days?unitGroup=metric&key=ZW9AR97RBK5CAKJJ8RDE9DR4P";



    FILE *file = fopen("raw_data", "wb");

    if (!file) {

        fprintf(stderr, "Error opening file for writing.\n");

        return 1;

    }



    CURL *curl = curl_easy_init();

    if (!curl) {

        fprintf(stderr, "Error initializing cURL.\n");

        fclose(file);

        return 1;

    }



    curl_easy_setopt(curl, CURLOPT_URL, url);

    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);

    curl_easy_setopt(curl, CURLOPT_WRITEDATA, file);



    CURLcode res = curl_easy_perform(curl);

    if (res != CURLE_OK) {

        fprintf(stderr, "cURL failed: %s\n", curl_easy_strerror(res));

    } else {

        fclose(file);



        file = fopen("raw_data", "rb");

        if (!file) {

            fprintf(stderr, "Error opening file for reading.\n");

            curl_easy_cleanup(curl);

            return 1;

        }



        fseek(file, 0, SEEK_END);

        long fileSize = ftell(file);

        rewind(file);



        char *buffer = malloc(fileSize + 1);

        if (!buffer) {

            fprintf(stderr, "Error allocating memory.\n");

            fclose(file);

            curl_easy_cleanup(curl);

            return 1;

        }



        size_t bytesRead = fread(buffer, 1, fileSize, file);

        fclose(file);



        if (bytesRead != fileSize) {

            fprintf(stderr, "Error reading file content.\n");

            free(buffer);

            curl_easy_cleanup(curl);

            return 1;

        }



        buffer[bytesRead] = '\0';



        // Call the function to write the report

        write_report(buffer);



        free(buffer);

    }



    curl_easy_cleanup(curl);

    return 0;

}

